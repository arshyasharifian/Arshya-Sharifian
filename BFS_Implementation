
//Simple BFS implementation.  


#include <iostream>
using namespace std;

//Node for simple tree
struct Node {
    char elem = 32;
    Node * left_child = NULL;
    Node * middle_child = NULL;
    Node * right_child = NULL;
};

//function for creating a new node
Node add_new_node(char elem){
    Node * create_nodes = new Node;
    create_nodes->elem = elem;
    return *create_nodes;
}

int main() {
    
    Node root = add_new_node ('A');
    Node b = add_new_node('B');
    Node c = add_new_node('C');
    Node d = add_new_node('D');
    Node e = add_new_node('E');
    Node f = add_new_node('F');
    Node g = add_new_node('G');
    Node h = add_new_node('H');
    Node i = add_new_node('I');
    Node j = add_new_node('J');
    Node k = add_new_node('k');
    Node l = add_new_node('L');
    Node m = add_new_node('M');
    Node n = add_new_node('N');
    Node o = add_new_node('O');
    Node p = add_new_node('P');
    Node q = add_new_node('Q');
    Node r = add_new_node('R');
    Node s = add_new_node('S');
    Node t = add_new_node('T');
    Node u = add_new_node('U');

   //connecting the nodes
    g.middle_child = &n;
    h.left_child = &o;
    h.right_child = &p;
    i.left_child = &p;
    i.right_child = &q;
    j.middle_child = &r;
    k.middle_child = &s;
    l.middle_child = &t;
    p.middle_child = &u;
    c.right_child = &h;
    c.left_child = &g;
    d.left_child = &i;
    d.right_child = &j;
    b.right_child = &f;
    b.left_child = &e;
    e.left_child = &k;
    e.right_child = &l;
    f.left_child = &l;
    f.right_child = &m;
    root.middle_child = &c;
    root.left_child = &b;
    root.right_child = &d;
    
    //open is an array-based queue
    Node open[26];
    int open_counter = 0;
    
    //first node is root node
    open[open_counter] = root;
    open_counter++;
    
    //index for open queue representing BFS
    int bfs_index = 0;
    
    //closed is an array-based queue
    Node closed[26];
    int closed_counter = 0;
    
    //SUCCESS value
    char goal = 'u';
    
    //while there are nodes to consider
    while (bfs_index < open_counter) {
        
        //boolean to check if a child node exists
        bool r_child_exists = false;
        bool l_child_exists = false;
        bool m_child_exists = false;
        
        //consider if current node is SUCCESS node
        if (open[bfs_index].elem == goal) {
            cout << "found" << endl;
            exit(0);
        }
        
        //checks if child exists
        if (open[bfs_index].left_child != NULL)
            l_child_exists = true;
        
        if (open[bfs_index].middle_child != NULL)
            m_child_exists = true;
        
        if (open[bfs_index].right_child != NULL)
            r_child_exists = true;
        
        //generate children of x
        Node temp_l_child;
        Node temp_m_child;
        Node temp_r_child;
        
        if ((l_child_exists) && (open[bfs_index].left_child->elem != 32)) temp_l_child = *open[bfs_index].left_child;
        if ((m_child_exists) && (open[bfs_index].middle_child->elem != 32)) temp_m_child = *open[bfs_index].middle_child;
        if ((r_child_exists) && (open[bfs_index].right_child->elem != 32)) temp_r_child = *open[bfs_index].right_child;
        
        //put current node in closed queue
        closed[closed_counter] = open[bfs_index];
        closed_counter++;
        
        //discard children of x if in either open or counter
        Node * check_l = &temp_l_child;
        Node * check_m = &temp_m_child;
        Node * check_r = &temp_r_child;
        
        //checks open array
        for (int i = bfs_index; i < open_counter; i++) {
            if (check_l->elem == open[i].elem) {
                l_child_exists = false;
            }
            if (check_m->elem == open[i].elem) {
                m_child_exists = false;
            }
            if (check_r->elem == open[i].elem) {
                r_child_exists = false;
            }
        }
        
        //check closed array
        for (int i = 0; i < closed_counter; i++) {
            if (check_l == &closed[i]) {
                l_child_exists = false;
            }
            if (check_m == &closed[i]) {
                m_child_exists = false;
            }
            if (check_r == &closed[i]) {
                r_child_exists = false;
            }
        }
        
        /*adding to open queue if child exists
         and isn't a in either the open or
         closed array
        */
        if ((l_child_exists)) {
            open[open_counter] = temp_l_child;
            open_counter++;
        }
        if (m_child_exists) {
            open[open_counter] = temp_m_child;
            open_counter++;
        }
        if (r_child_exists) {
            open[open_counter] = temp_r_child;
            open_counter++;
        }
        
        bfs_index++;
        
        //tracings
        cout << "open" << endl;
        for (int i = bfs_index; i < open_counter; i++) {
            cout << open[i].elem << endl;
        }
        cout << "closed" << endl;
        for (int i = 0; i < closed_counter; i++) {
            cout << closed[i].elem << endl;
        }
    }
    
    cout << "not found" << endl;
    
    return 0;
}
