#include <iostream>
#include <string>
#include <fstream>
#include <iomanip>
using namespace std;

//struct for holding LA record
struct LA_output{
    string token;   //category
    string lexeme;  //actual
};

//functions to write to file
template <typename T>
void writetofile(ofstream& ofs, T& x, string token, LA_output & val) {
    val.lexeme = x;
    val.token = token;
    ofs << setw(10) << x << "\t\t\t" << token << endl;
}
template <typename T>
void writetofile(T* x, string token, LA_output & val) {
    val.lexeme = x;
    val.token = token;
    writetofile(*x, token);
}

void SA_output(ofstream & ofs, string production){
    ofs << production;
}
///////////////////////////////////////////////////////////////////////////////////
void m_id_key(ofstream& ofs, char *&p, string * keyword, LA_output & val) {
    //since starting state is 1 and entering this function requires a letter input
    int state = 2;
    bool found_keyword = false;
    string word = "";
    /*
     A finite state machine for identifiers and keywords;
     will continue checking character inputs as long as
     they are valid inputs (letter, digit, $).
     Accepting states 2, 3, 5
     */
    int id_FSM[6][4]{
        //state   L   D   $
        1,        2,  6,  6,
        2,        3,  4,  5,
        3,        3,  4,  5,
        4,        3,  4,  5,
        5,        6,  6,  6,
        6,        6,  6,  6
        
    };
    //while valid input
    while (((isalpha(*p)) || (isdigit(*p))) || (*p == '$')) {
        if (isalpha(*p))
            state = id_FSM[state - 1][1];
        else if (isdigit(*p))
            state = id_FSM[state - 1][2];
        else
            state = id_FSM[state - 1][3];
        word += *p;
        ++p;
    }
    //if accepting state
    if (((state == 2) || (state == 3)) || (state == 5)) {
        //check if keyword
        for (int i = 0; i < 13; i++) {
            if (word == keyword[i]) {
                found_keyword = true;
                writetofile(ofs, word, "keyword", val);
            }
        }
        //otherwise its an identifier
        if (!found_keyword)
            writetofile(ofs, word, "identifier", val);
    }
    //not accepting state
    else
        writetofile(ofs, word, "unknown", val);
}
//determines whether the input characters are integers or real numbers
void m_int_real(ofstream& ofs, char*&p, LA_output & val) {
    int state = 2; //set to 2 since input char was a digit
    /*
     combination of integer and real number FSM
     states 2 is accepting states for integer numbers
     state 4 is the accepting state for real numbers
     state 5 is an error state.
     */
    int int_real_FSM[5][3]{
        //state     D   .
        1,          2,  5,
        2,          2,  3,
        3,          4,  5,
        4,          4,  5,
        5,          5,  5,
    };
    string word = "";
    //while valid input
    while (isdigit(*p) || (*p) == '.') {
        if (isdigit(*p))
            state = int_real_FSM[state - 1][1];
        else
            state = int_real_FSM[state - 1][2];
        word += *p;
        ++p;
    }
    if (state == 2)
        writetofile(ofs, word, "integer", val);
    else if (state == 4)
        writetofile(ofs, word, "real", val);
    else
        writetofile(ofs, word, "unknown", val);
}

//determines if the character is a separator
bool is_sep(ofstream& ofs, char *&p, char * sep, LA_output & val) {
    for (int i = 0; i < 10; i++){
        if (*p == sep[i]){
            if (*p == '%'){
                //if next char is also %
                if (*(++p) == '%'){
                    writetofile(ofs, "%%","separator", val);
                    ++p;
                    return true;
                }
                else{
                    //decrement to original p for error message
                    --p;
                    char tmp = p[0];
                    writetofile(ofs, tmp,"unknown", val);
                    ++p;
                    return true;
                }
            }
            else{
                char tmp = p[0];
                writetofile(ofs, tmp,"separator", val);
                ++p;
                return true;
            }
        }
    }
    return false;
}
//determines if the current character and next char are operators
bool is_op(ofstream& ofs, char *&p, char * ope, LA_output & val) {
    string two_char_operator [4] = {"==", "=>", "=<", "^="};
    
    string word_ope = "";
    for (int i = 0; i < 8; i++) {
        if (*p == ope[i]) {
            word_ope += *p;
            ++p;
            //second loop to check if next char is part of operator
            for (int k = 0; k < 8; k++) {
                if (*p == ope[k]) {
                    word_ope += *p;
                    for (int j = 0; j < 4; j++){
                        if (word_ope == two_char_operator[j]){
                            writetofile(ofs, word_ope, "operator", val);
                            //cout << word_ope << " is valid" << endl;
                            ++p;
                            return true;
                        }//end if two_char operator
                    }//end for checking valid two_char operator
                    //if second char isn't a valid operator
                    ++p;
                    writetofile(ofs, word_ope, "unknown", val);
                    //cout << word_ope << " is not valid" << endl;
                    return true;
                }//end if second char is an operator
            }//end for k
            writetofile(ofs, word_ope, "operator", val);
            //cout << word_ope << " is valid" << endl;
            return true;
        }//end if first char is an operator
    }
    //cout << word_ope << " is not valid" << endl;
    return false;
}
//checks for comments
bool is_comment(char *&p, fstream & fin, string & x){
    if (*p == '!'){
        ++p;
        while (*p != '!')
        {
            if (p != &x[x.length()])
                ++p;
            else
            {
                getline(fin, x);
                p = &x[0];
            }
        }
        ++p;
        return true;
    }
    return false;
}

//the lexer function considers all valid inputs
LA_output lexer(char *& p, ofstream & outfile, fstream & fin, string & x){
    //valid keywords, separators, and operators
    string keywords[13] = { "int","boolean","real","function","return","true",
        "false","if","else","endif","while","get","put" };
    char separators[10] = { '(',')',':',',','{','}', ']', '[', ';', '%' };
    char operators[8] = { '<','>','=','^','+','-','*','/' };
    
    LA_output ex;
    if (isalpha(*p))m_id_key(outfile, p, keywords, ex);
    else if (isdigit(*p))m_int_real(outfile, p, ex);
    else if (is_op(outfile, p, operators, ex)) {}
    else if (is_sep(outfile, p, separators, ex)) {}
    else if ((((*p) == 32) || (*p == '\t')) || ((*p == '\n') || (int)(*p) == 13)) {
        ++p;
        //lexer (p, outfile, fin, x);
    }
    else if (is_comment(p, fin, x)){}
    else {
        char tmp = p[0];
        writetofile(outfile, tmp, "unknown", ex);
        ++p;
    }
    return ex;
}

bool is_space(char x){
    if ((((x) == 32) || (x == '\t')) || ((x == '\n') || (int)(x) == 13)) return true;
    return false;
}


/*
 Assume we have the following statement
 a = b + c;
 
 One possible output would be as follows:
 
 Token: Identifier          Lexeme: a
 <Statement> -> <Assign>
 <Assign> ->  <Identifier>  = <Expression> ;
 
 Token: Operator          Lexeme: =
 
 Token: Identifier          Lexeme: b
 <Expression> -> <Term> <Expression Prime>
 <Term> -> <Factor> <Term Prime>
 <Factor> -> <Identifier>
 
 Token:  Operator          Lexeme: +
 <Term Prime> -> ε
 <Expression Prime> -> + <Term> <Expression Prime>
 
 Token:  Identifier           Lexeme: c
 <Term>  -> <Factor> <Term Prime>
 <Factor> -> <Identifier>
 
 Token: Separator           Lexeme: ;
 <Term Prime> -> ε
 <Expression Prime> -> ε
*/

/*
Notes: I think we must call the lexer in a specific function and expect to see a certain
 token value, if not, it changes the direction of our syntax analysis or it could be an error.
 For the example, a = b + c, when we see "a", we limit the various options available for 
 an identifier as the first token. Once we find a rule that expects an identifier as the first token
 in the line, we call the lexer (AT THAT POINT) to see if the next token is an "=".  If so,
 we must continue down the <assign> path which expects an "=" sign next.  We again call the 
 lexer (AT THAT POINT) and satisfy the valid conditions for <expression>.  If we are unable to satisfy
 the conditions for <expression> there is an error.
*/

/*MY OUTPUT
a			identifier
<Statement> -> <Assign>
<Assign> -> <Identifier> = <Expression>
=			operator
b			identifier
<Expression> -> <Term> <Expression Prime>
+			operator
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <primary>
c			identifier
*/


/*PROPER OUTPUT
One possible output would be as follows:

Token: Identifier          Lexeme: a
<Statement> -> <Assign>
<Assign> ->  <Identifier>  = <Expression> ;

Token: Operator          Lexeme: =

Token: Identifier          Lexeme: b
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Identifier>

Token:  Operator          Lexeme: +
<Term Prime> -> ε
<Expression Prime> -> + <Term> <Expression Prime>

Token:  Identifier           Lexeme: c
<Term>  -> <Factor> <Term Prime>
<Factor> -> <Identifier>

Token: Separator           Lexeme: ;
<Term Prime> -> ε
<Expression Prime> -> ε
*/


void get_token(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    //create function for this block
    record = lexer (p, outfile, fin, line_code);
    //the beginning of an expression starts with an identifier
    while ((is_space(record.lexeme[0])) || (record.lexeme.length() == 0)) {
        //cout << "3 space" << endl;
        record = lexer (p, outfile, fin, line_code);
    }
    //end function here
}

//function headers
void statementlistP(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code);
void SA(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code);
void term (char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code);
void expression (char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code);
void qualifier (char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code);
void statementlist(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code);
void statement(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code);
void ids(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code);

//r29
void empty(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Empty>\n");
    
    
}

//r28
void primary(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output (outfile, "<Primary> ->  <Identifier> | <Integer> | <Identifier (<IDs> ) | (<Expression>) | <Real> | true | false\n");

    if (record.token == "identifier"){
        //if at the end of the line, then we know thats it
        //else if (, then call Ids
        
        SA_output(outfile, "<Primary> -> <Identifier>\n");
        get_token(p, outfile, fin, record, line_code);
    }
    else if (record.token == "integer"){
        SA_output(outfile, "<Primary> -> <integer>\n");
    }
    else if (record.lexeme == "("){
        SA_output(outfile, "<Primary> -> (<Expression>)\n");
        expression(p, outfile, fin, record, line_code);
        get_token(p, outfile, fin, record, line_code);
        if (record.lexeme == ")"){
            //we good
        }
        else{
            cout << "error(2): primary" << endl;
        }
        
    }
    else if (record.token == "Real"){
        SA_output(outfile, "<Primary> -> <real>\n");
    }
    else if (record.lexeme == "true"){
        SA_output(outfile, "<Primary> -> true\n");

    }
    else if (record.lexeme == "false"){
        SA_output(outfile, "<Primary> -> false\n");

    }
    else{
        cout << "error(1): primary" << endl;
    }
}

//r27
void factor (char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output (outfile, "<Factor> -> -<Primary> | <Primary>\n");

    if (record.lexeme == "-"){
        SA_output (outfile, "<Factor> -> - <primary>\n");
    }
    else {
        SA_output (outfile, "<Factor> -> <primary>\n");
    }
    primary(p, outfile, fin, record, line_code);
}


//r26 prime
void termP (char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output (outfile, "<Term Prime> -> *<Factor><Term> | /<Factor><Term> |<Empty>\n");

    
    if (record.lexeme == "*"){
        SA_output (outfile, "<Term Prime> -> * <Term> <Factor>\n");
        term(p, outfile, fin, record, line_code);
    }
    else if (record.lexeme == "/"){
        SA_output (outfile, "<Term Prime> -> / <Term> <Factor>\n");
        term(p, outfile, fin, record, line_code);
    }
    /*
     //end of code line
     else if (record.lexeme == ";"){
     SA_output (outfile, "<Term Prime> -> Epsilon\n");
     //should go to next token
     }
     */
    else{
        cout << "error: TermP" << endl;
    }
    
    
    
}

//r26
void term (char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output (outfile, "<Term> -> <Factor> <Term Prime>\n");
    factor(p, outfile, fin, record, line_code);
    termP(p, outfile, fin, record, line_code);
}


//r25 prime
void expressionP(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output (outfile, "<Expression Prime> -> + <Term> <Expression | - <Term> <Expression | Empty\n");
    
    if ((record.lexeme == "+") || (record.lexeme == "-")){
        term(p, outfile, fin, record, line_code);
        expression(p, outfile, fin, record, line_code);
    }
    //else if end of line code, we good
    
    /*PREV IDEA, DON'T THINK IT WILL WORK, BUT IT MIGHT BE RIGHT
    else if (record.lexeme == ";"){
        SA_output (outfile, "<Expression Prime> -> Epsilon\n");
        SA(p, outfile, fin, record, line_code);
    }
    */
    else{
        cout << "expression prime: error" << endl;
        
    }
}

//r25
void expression (char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Expression> -> <Term> <Expression Prime>\n");
    term(p, outfile, fin, record, line_code);
    expressionP(p, outfile, fin, record, line_code);
}

//r24
void relop (char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Relop> -> == | ^= | > | < | => | =< \n");
    if ((record.lexeme == "==") || (record.lexeme == "^=")){
        
    }
    else if ((record.lexeme == ">") || (record.lexeme == "<")){
        
    }
    else if ((record.lexeme == "=>") || (record.lexeme == "=<")){
        
    }
    else{
        cout << "error: relop" << endl;
    }

}

//r23
void condition (char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Condition> -> <Expression> <Relop> <Expression>\n");
    expression(p, outfile, fin, record, line_code);
    relop(p, outfile, fin, record, line_code);
    expression(p, outfile, fin, record, line_code);
    
}

//r22
void while_r(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<While> -> while (<Condition>) <Statement>\n");
    if (record.lexeme == "("){
        condition(p, outfile, fin, record, line_code);
        get_token(p, outfile, fin, record, line_code);
        if (record.lexeme == ")"){
            statement(p, outfile, fin, record, line_code);
        }
        else{
            cout << "error(2): while_r" << endl;
        }
    }
    else{
        cout << "error(1): while_r" << endl;
    }
    
}

//r21
void scan (char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Scan> -> get (<Scan>);\n");
    if (record.lexeme == "get"){
        get_token(p, outfile, fin, record, line_code);
        if (record.lexeme == "("){
            ids(p, outfile, fin, record, line_code);
            get_token(p, outfile, fin, record, line_code);
            if(record.lexeme == ")"){
                get_token(p, outfile, fin, record, line_code);
                if (record.lexeme == ";"){
                    //good
                }
                else{
                    cout << "error (4): scan" << endl;
                }
            }
            else{
                cout << "error(3): scan" << endl;
            }
        }
        else{
            cout << "error(2): scan" << endl;
        }
    }
    else{
        cout << "error(1): scan" << endl;
    }

}

//r20
void print(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    //assume token put
    SA_output(outfile, "<Print> -> put ( <Expression> );\n");
    get_token(p, outfile, fin, record, line_code);
    if (record.lexeme == "("){
        expression(p, outfile, fin, record, line_code);
        get_token(p, outfile, fin, record, line_code);
        if (record.lexeme == ")"){
            //get_token
            if (record.lexeme == ";"){
                //all good
                //get next line
            }
            else{
                cout << "error(3): print" << endl;
                //get next line
            }
        }
        else{
            cout << "error(2): print" << endl;
            //get next line
        }
    }
    else{
        cout << "error(1): print" << endl;
        //get next line
    }
}



//r19p
void return_rp(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<ReturnP> -> ;|<Expression>\n");
    //call get_token
    if (record.lexeme == ";"){
        //good
    }
    else{
        expression(p, outfile, fin, record, line_code);
        get_token(p, outfile, fin, record, line_code);
        if (record.lexeme == ";"){
            //good
        }
        else{
            cout << "error (1): return_rp" << endl;
        }
    }

}

//r19
void return_r (char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Return> -> return <ReturnP>\n");
    get_token(p, outfile, fin, record, line_code);
    if (record.lexeme == "return"){
       return_rp (p, outfile, fin, record, line_code);
    }
    else{
        cout << "error: return_r" << endl;
    }
    
}

//r18p
void if_rp(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<If Prime> -> endif | else <Statement> endif\n");
    get_token(p, outfile, fin, record, line_code);
    if (record.lexeme == "endif"){
        
    }
    else if (record.lexeme == "else"){
        statement(p, outfile, fin, record, line_code);
        get_token(p, outfile, fin, record, line_code);
        if (record.lexeme == "endif"){
                //good
        }
        else{
            cout << "error (2): if_rp" << endl;
        }
        
    }
    else{
        cout << "error (1): if_rp" << endl;
    }

}


//r18
void if_r (char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<If> -> if ( <Condition> ) <Statement> <ifP> \n");
    //get token
    get_token(p, outfile, fin, record, line_code);
    if (record.lexeme == "("){
        //call condition
        condition(p, outfile, fin, record, line_code);
        get_token(p, outfile, fin, record, line_code);
        if(record.lexeme == ")"){
            statement(p, outfile, fin, record, line_code);
            if_rp(p, outfile, fin, record, line_code);
        }
        else{
            cout << "error(2): if_r" << endl;
        }
    }
    else{
        cout << "error(1): if_r" << endl;
    }
}

//r17
void assign (char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Assign> -> <Identifier> = <Expression>\n");
    get_token (p, outfile, fin, record, line_code);
    if (record.lexeme[0] == '='){
        get_token(p, outfile, fin, record, line_code);
        if (record.token == "identifier"){
            expression(p, outfile, fin, record, line_code);
        }
        else{
            cout << "error (2): assign" << endl;
        }
    }
    else {
        cout << "error (1): assign" << endl;
        //call next code line
    }
    
}

//r16
void compound (char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Compound> -> { <Statement List> }\n");
    
    if (record.lexeme == "{"){
        statementlist(p, outfile, fin, record, line_code);
        if (record.lexeme == "}"){
            //good
        }
        else{
            cout << "error (2): compound" << endl;
        }
    }
    else{
        cout << "error(1): compound" << endl;
    }
    
}

//r15
void statement(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>\n");
    if (record.lexeme == "{"){
        compound (p, outfile, fin, record, line_code);
    }
    else if (record.token == "identifier"){
        assign(p, outfile, fin, record, line_code);
    }
    else if (record.lexeme == "if"){
        if_r(p, outfile, fin, record, line_code);
    }
    else if (record.lexeme == "return"){
        return_r(p, outfile, fin, record, line_code);
    }
    else if (record.lexeme == "put"){
        //call print
        print(p, outfile, fin, record, line_code);
    }
    else{
        cout << "error: statement production" << endl;
        //get next line
        exit(0);
    }
}

//r14p
void statementlistP(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Statement ListP> -><Empty>|<Statement List\n");
    //if at end of line, then empty
    //else call statement
}

//r14
void statementlist(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Statement List> -><Statement><Statement ListP\n");
    statement(p, outfile, fin, record, line_code);
    statementlistP(p, outfile, fin, record, line_code);
}

//r13p
void idsP(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Scan Prime> ->  <empty> <Scan Prime>\n");

    //if at the end of line, call empty
    //else if check for , and call scan
    
}

//r13
void ids(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<IDs> ->  <identifier> <Scan Prime>\n");
    if (record.token == "identifier"){
        idsP(p, outfile, fin, record, line_code);
        
    }
    else{
        cout << "error: scan_r" << endl;
    }


}

//r12
void declaration(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Declaration> ->  <Qualifier> <Scan>\n");
    qualifier(p, outfile, fin, record, line_code);
    ids(p, outfile, fin, record, line_code);
    
}

//r11p
void declarationlistP(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Declaration List Prime> ->  <Empty> | <Declaration List>\n");
    //if at the end of the line call empty
    //else call declaration list

}

//r11
void declarationlist(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Declaration List> ->  <Declaration> ; <Declaration List Prime>\n");
    declaration(p, outfile, fin, record, line_code);
    get_token(p, outfile, fin, record, line_code);
    if (record.lexeme == ";"){
        declarationlistP(p, outfile, fin, record, line_code);
    }
}


//r10
void optDeclarationlist(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Opt Declaration List> ->  <Declaration List> | <Empty>\n");
    //if at the end of the end of line call empty
    //else call declaration list
    
}

//r9
void body (char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Body> ->  { <Statement List> }\n");
    if (record.lexeme == "{"){
        statementlist(p, outfile, fin, record, line_code);
        get_token(p, outfile, fin, record, line_code);
        if (record.lexeme == "}"){
            //good
        }
        else{
            cout << "error (2): body" << endl;
        }
    }
    else{
        cout << "error (1): body" << endl;
    }
}

//r8
void qualifier (char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Qualifier> -> int | boolean | real\n");
    if ((record.token == "integer") || (record.token == "real")){
        
    }
    else if ((record.lexeme == "true") || (record.lexeme == "false")){
        
    }
    else{
        cout << "error: qualifer" << endl;
    }

}

//r7
void parameter (char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Parameter> -> <Scan> : <Qualifer>\n");
    ids(p, outfile, fin, record, line_code);
    
    get_token(p, outfile, fin, record, line_code);
    if (record.lexeme == ":"){
        qualifier(p, outfile, fin, record, line_code);
    }
    else{
        cout <<"error: parameter" << endl;
    }

}

//r6p
void parameterlistP(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Parameter List Prime> -> <Empty> | <Parameter List>\n");
    //if at end of code line, call empty
    //else call parameter list
    
}

//r6
void parameterlist(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Parameter List> -> <Parameter> <Parameter List Prime>\n");
    parameter(p, outfile, fin, record, line_code);
    parameterlistP(p, outfile, fin, record, line_code);

}

//r5
void optParameterlist (char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Opt Parameter List> -> <Parameter List> | <Empty>\n");
    //if at end of code line, call empty
    //else call parameter list
    
}

//r4
void function_r(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Function> -> function <Identifier> [ <Opt Parameter List> ] <Opt Declaration List> <Body> <Empty> | <Function Definitions>\n");
    
    if (record.lexeme == "function"){
        //get_token
        if (record.token == "identifier"){
            //get_token
            if (record.lexeme == "["){
                optDeclarationlist(p, outfile, fin, record, line_code);
            }
            else{
                cout << "error (3): function_r" << endl;
            }
        }
        else{
            cout << "error (2): function_r" << endl;
        }
    }
    else{
        cout << "error (1): function_r" << endl;
    }
    
}

//r3p
void functiondefinitionsP(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Function Definitions Prime> -> <Empty> | <Function Definitions>\n");
    //if at end of code line, call empty
    //else call function definitions
}

//r3
void functiondefinitions(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Function Definitions> -> <Function> <Function Definitions Prime>\n");
    function_r(p, outfile, fin, record, line_code);
    functiondefinitionsP(p, outfile, fin, record, line_code);
}

//r2
void optFunctiondefinitions(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<Opt Function Definitions> -> <Opt Function Definitions> | <Empty> \n");
    
    //if at end of line, call empty
    //else call functiondefinitions
    //functiondefinitions(p, outfile, fin, record, line_code);
    
    
}

//r1
void rat18s (char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    SA_output(outfile, "<rat18s> -><Opt Function Definitions > %% <Opt Declaration List> <Statement List>\n");
    optFunctiondefinitions(p, outfile, fin, record, line_code);
    get_token(p, outfile, fin, record, line_code);
    if (record.lexeme == "%%"){
        optDeclarationlist(p, outfile, fin, record, line_code);
        statementlist(p, outfile, fin, record, line_code);
    }
    else{
        cout << "error: rat18s" << endl;
        //get next line
    }

}



//The start of the syntax analyzation
void SA(char *&p, ofstream & outfile, fstream & fin, LA_output & record, string & line_code){
    get_token(p, outfile, fin, record, line_code);
    statement(p, outfile, fin, record, line_code);
}
/////////////////////////////////////////////////////////////////

int main() {
    
    //read file
    fstream fin;
    
    //candidate lexeme
    char * lex_candid;
    
    //holds each input file line
    string line_code;
    string file_name;
    
    //structure containing lexer function results
    LA_output record;
    
    //prompt user to enter file name
    //cout << "What is the name of the txt file you want to test:  " << endl;
    //cin >> file_name;
    file_name = "t1.txt";
    fin.open(file_name);
    
    //while unable to open file prompt user to re-enter file name
    while (!(fin.is_open())){
        cout << "Unable to open file; please re-enter file name" << endl;
        cin >> file_name;
        fin.open(file_name);
    }
    
    //creating and formatting output file
    ofstream outfile("output.txt");
    outfile << setw(10)<<"token"<<"\t\t\t" << "lexeme" <<endl;
    outfile << "--------------------------------------------------------------\n";
    
    //while there are remaining code lines
    while (getline(fin, line_code)) {
        //point to the first character of line
        lex_candid = &line_code[0];
        while (lex_candid != &line_code[line_code.length()]) {
            
            SA (lex_candid, outfile, fin, record, line_code);
            cout << "after SA" << endl;
           
            
        }
    }
    
    fin.close();
    outfile.close();
    return 0;
}

