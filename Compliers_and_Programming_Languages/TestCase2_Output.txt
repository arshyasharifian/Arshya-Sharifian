TestCase2.txt
     token			lexeme
--------------------------------------------------------------
        %%			separator
<rat18s> -><Opt Function Definitions > %% <Opt Declaration List> <Statement List>
       int			keyword
<Opt Declaration List> ->  <Declaration List> | <Empty>
<Declaration List> ->  <Declaration> ; <Declaration List Prime>
<Declaration> ->  <Qualifier> <Ids>
<Qualifier> -> int | boolean | real
         i			identifier
<IDs> ->  <identifier> <IDs Prime>
         ,			separator
<Ids Prime> ->  <Empty> |, <Ids>
       max			identifier
<IDs> ->  <identifier> <IDs Prime>
         ,			separator
<Ids Prime> ->  <Empty> |, <Ids>
       sum			identifier
<IDs> ->  <identifier> <IDs Prime>
         ;			separator
<Ids Prime> ->  <Empty> |, <Ids>
<Ids Prime> -> <Empty>
       sum			identifier
<Declaration List Prime> ->  <Empty> | <Declaration List>
<Declaration List Prime> -> <Empty>
<Opt Declaration List> -> <Empty>
<Statement List> -><Statement><Statement ListP
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> -> <Identifier> = <Expression>;
         =			operator
         0			integer
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> -<Primary> | <Primary>
<Factor> -> <Primary>
<Primary> ->  <Identifier> <Primary Prime> | <Integer> | (<Expression>) | <Real> | true | false
         ;			separator
<Primary> -> <integer>
<Term Prime> -> *<Factor> <Term Prime> | /<Factor> <Term Prime> |<Empty>
<Term Prime> -> <Empty>
<Expression Prime> -> + <Term> <Expression Prime> | - <Term> <Expression Prime> | Empty
<Expression Prime> -> <Empty>
         i			identifier
<Statement ListP> -><Empty>|<Statement List
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> -> <Identifier> = <Expression>;
         =			operator
         1			integer
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> -<Primary> | <Primary>
<Factor> -> <Primary>
<Primary> ->  <Identifier> <Primary Prime> | <Integer> | (<Expression>) | <Real> | true | false
         ;			separator
<Primary> -> <integer>
<Term Prime> -> *<Factor> <Term Prime> | /<Factor> <Term Prime> |<Empty>
<Term Prime> -> <Empty>
<Expression Prime> -> + <Term> <Expression Prime> | - <Term> <Expression Prime> | Empty
<Expression Prime> -> <Empty>
       get			keyword
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Scan> -> get (<Ids>);
         (			separator
       max			identifier
<IDs> ->  <identifier> <IDs Prime>
         )			separator
<Ids Prime> ->  <Empty> |, <Ids>
<Ids Prime> -> <Empty>
         ;			separator
     while			keyword
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<While> -> while (<Condition>) <Statement>
         (			separator
         i			identifier
<Condition> -> <Expression> <Relop> <Expression>
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> -<Primary> | <Primary>
<Factor> -> <Primary>
<Primary> ->  <Identifier> <Primary Prime> | <Integer> | (<Expression>) | <Real> | true | false
         <			operator
<Primary Prime> -> (<Ids>) | Empty
<Primary Prime> -> <Empty>
<Term Prime> -> *<Factor> <Term Prime> | /<Factor> <Term Prime> |<Empty>
<Term Prime> -> <Empty>
<Expression Prime> -> + <Term> <Expression Prime> | - <Term> <Expression Prime> | Empty
<Expression Prime> -> <Empty>
<Relop> -> == | ^= | > | < | => | =< 
       max			identifier
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> -<Primary> | <Primary>
<Factor> -> <Primary>
<Primary> ->  <Identifier> <Primary Prime> | <Integer> | (<Expression>) | <Real> | true | false
         )			separator
<Primary Prime> -> (<Ids>) | Empty
<Primary Prime> -> <Empty>
<Term Prime> -> *<Factor> <Term Prime> | /<Factor> <Term Prime> |<Empty>
<Term Prime> -> <Empty>
<Expression Prime> -> + <Term> <Expression Prime> | - <Term> <Expression Prime> | Empty
<Expression Prime> -> <Empty>
         {			separator
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Compound> -> { <Statement List> }
       sum			identifier
<Statement List> -><Statement><Statement ListP
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> -> <Identifier> = <Expression>;
         =			operator
       sum			identifier
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> -<Primary> | <Primary>
<Factor> -> <Primary>
<Primary> ->  <Identifier> <Primary Prime> | <Integer> | (<Expression>) | <Real> | true | false
         +			operator
<Primary Prime> -> (<Ids>) | Empty
<Primary Prime> -> <Empty>
<Term Prime> -> *<Factor> <Term Prime> | /<Factor> <Term Prime> |<Empty>
<Term Prime> -> <Empty>
<Expression Prime> -> + <Term> <Expression Prime> | - <Term> <Expression Prime> | Empty
         i			identifier
<Term> -> <Factor> <Term Prime>
<Factor> -> -<Primary> | <Primary>
<Factor> -> <Primary>
<Primary> ->  <Identifier> <Primary Prime> | <Integer> | (<Expression>) | <Real> | true | false
         ;			separator
<Primary Prime> -> (<Ids>) | Empty
<Primary Prime> -> <Empty>
<Term Prime> -> *<Factor> <Term Prime> | /<Factor> <Term Prime> |<Empty>
<Term Prime> -> <Empty>
<Expression Prime> -> + <Term> <Expression Prime> | - <Term> <Expression Prime> | Empty
<Expression Prime> -> <Empty>
         i			identifier
<Statement ListP> -><Empty>|<Statement List
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> -> <Identifier> = <Expression>;
         =			operator
         i			identifier
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> -<Primary> | <Primary>
<Factor> -> <Primary>
<Primary> ->  <Identifier> <Primary Prime> | <Integer> | (<Expression>) | <Real> | true | false
         +			operator
<Primary Prime> -> (<Ids>) | Empty
<Primary Prime> -> <Empty>
<Term Prime> -> *<Factor> <Term Prime> | /<Factor> <Term Prime> |<Empty>
<Term Prime> -> <Empty>
<Expression Prime> -> + <Term> <Expression Prime> | - <Term> <Expression Prime> | Empty
         1			integer
<Term> -> <Factor> <Term Prime>
<Factor> -> -<Primary> | <Primary>
<Factor> -> <Primary>
<Primary> ->  <Identifier> <Primary Prime> | <Integer> | (<Expression>) | <Real> | true | false
         ;			separator
<Primary> -> <integer>
<Term Prime> -> *<Factor> <Term Prime> | /<Factor> <Term Prime> |<Empty>
<Term Prime> -> <Empty>
<Expression Prime> -> + <Term> <Expression Prime> | - <Term> <Expression Prime> | Empty
<Expression Prime> -> <Empty>
         }			separator
<Statement List Prime> -> <Empty>
       put			keyword
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Print> -> put ( <Expression> );
         (			separator
       sum			identifier
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> -<Primary> | <Primary>
<Factor> -> <Primary>
<Primary> ->  <Identifier> <Primary Prime> | <Integer> | (<Expression>) | <Real> | true | false
         +			operator
<Primary Prime> -> (<Ids>) | Empty
<Primary Prime> -> <Empty>
<Term Prime> -> *<Factor> <Term Prime> | /<Factor> <Term Prime> |<Empty>
<Term Prime> -> <Empty>
<Expression Prime> -> + <Term> <Expression Prime> | - <Term> <Expression Prime> | Empty
       max			identifier
<Term> -> <Factor> <Term Prime>
<Factor> -> -<Primary> | <Primary>
<Factor> -> <Primary>
<Primary> ->  <Identifier> <Primary Prime> | <Integer> | (<Expression>) | <Real> | true | false
         )			separator
<Primary Prime> -> (<Ids>) | Empty
<Primary Prime> -> <Empty>
<Term Prime> -> *<Factor> <Term Prime> | /<Factor> <Term Prime> |<Empty>
<Term Prime> -> <Empty>
<Expression Prime> -> + <Term> <Expression Prime> | - <Term> <Expression Prime> | Empty
<Expression Prime> -> <Empty>
         ;			separator
<Statement List Prime> -> <Empty>

Symbol Table: 
i	int	2000
max	int	2001
sum	int	2002

Instruction Table: 
1	PUSHI	0
2	POPM	2002
3	PUSHI	1
4	POPM	2000
5	STDIN	0
6	POPM	2001
7	LABEL	0
8	PUSHM	2000
9	PUSHM	2001
10	LES	0
11	JUMPZ	21
12	PUSHM	2002
13	PUSHM	2000
14	ADD	0
15	POPM	2002
16	PUSHM	2000
17	PUSHI	1
18	ADD	0
19	POPM	2000
20	JUMP	7
21	PUSHM	2002
22	PUSHM	2001
23	ADD	0
24	STDOUT	0
25	LABEL	0
